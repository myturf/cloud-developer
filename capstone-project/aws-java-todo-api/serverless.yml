service: todo-api

custom:
  toDoTableName: 'java-todo-${self:provider.stage}'

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'develop'}
  region: ${opt:region, 'us-east-2'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:*"
      Resource: "*"
  environment:
    TODO_TABLE_NAME: ${self:custom.toDoTableName}

package:
  artifact: 'target/${self:service}-${self:provider.stage}.jar'

functions:
  listToDo:
    handler: com.udacity.rest.ListToDoHandler
    events:
      - http:
          path: /todo
          method: get
          cors: true
  getToDo:
    handler: com.udacity.rest.GetToDoHandler
    events:
      - http:
          path: /todo/{id}
          method: get
          cors: true
  createToDo:
    handler: com.udacity.rest.CreateToDoHandler
    events:
      - http:
          path: /todo
          method: post
          cors: true
  deleteToDo:
    handler: com.udacity.rest.DeleteToDoHandler
    events:
      - http:
          path: /todo/{id}
          method: delete
          cors: true

resources:
  Resources:
    ToDoDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.toDoTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
